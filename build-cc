#! /bin/bash

# build-cc @@VERS@@

if [ "$1" == "--version" ]; then
	echo 'build-cc @@VERS@@'

	exit 0
fi

# Start in the same working directory as our script
OURSCP="$(which "$0" 2>/dev/null)"
if [ -f "${OURSCP}" ]; then
	TOPDIR="$(cd "$(dirname "${OURSCP}")"; pwd)"
fi
export TOPDIR

cd "${TOPDIR}" || exit 1

# Load configuration
## Provide defaults
### Root for cross-compiler toolchains
CCROOT="${HOME}/root/cross-compilers"

### Path to platform files
if [ -z "${BUILD_CC_PLATFORMDIR}" ]; then
	BUILD_CC_PLATFORMDIR="$(pwd)/platform"
fi

## Load configuration file
if [ -f "build-cc.conf" ]; then
	. "build-cc.conf"
fi

# Tool versions
BINUTILS_VERS='2.22'
CLANG_VERS='3.3'
LLVM_VERS="${CLANG_VERS}"
CRT_VERS="${CLANG_VERS}"

# Start of script
## Initialize default values
use_multilib='1'
use_gnu_ld='1'
use_gnu_as='1'

## Parse arguments
### Determine list of platforms
platforms[0]='armel-unknown-linux-uclibc'
platforms[1]='mipsel-unknown-linux-uclibc'
idx=2
for platform in "${BUILD_CC_PLATFORMDIR}"/*-platform.tar.bz2; do
	if [ ! -f "${platform}" ]; then
		continue
	fi

	platform="$(basename "${platform}" | sed 's@-platform.tar.bz2$@@')"

	platforms[${idx}]="${platform}"
	idx=$[${idx} + 1]
done

if [ -z "$1" ]; then
	set -- list
fi

if [ "$1" = "list" ]; then
	echo 'Available Targets:'
	for platform in "${platforms[@]}"; do
		echo "  ${platform}"
	done

	exit 0
elif [ "$1" = "clean" -o "$1" = "distclean" ]; then
	true
else
	found='0'
	for platform in "${platforms[@]}"; do
		if [ "$1" = "${platform}" ]; then
			found='1'

			break
		fi
	done

	if [ "${found}" = '0' ]; then
		echo "Unknown target: $1, aborting." >&2

		exit 1
	fi
fi

## URLs
### Binutils
BINUTILS_URL="http://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VERS}.tar.bz2"
BINUTILS_TARBALL="src/binutils-${BINUTILS_VERS}.tar.bz2"
BINUTILS_DIR="binutils-${BINUTILS_VERS}"

### CLANG
if [ "${CLANG_VERS}" = "3.3" ]; then
	CLANG_NAME="cfe"
else
	CLANG_NAME="clang"
fi
CLANG_URL="http://llvm.org/releases/${CLANG_VERS}/${CLANG_NAME}-${CLANG_VERS}.src.tar.gz"
CLANG_TARBALL="src/${CLANG_NAME}-${CLANG_VERS}.tar.gz"
CLANG_DIR="${CLANG_NAME}-${CLANG_VERS}.src"

### LLVM
LLVM_URL="http://llvm.org/releases/${LLVM_VERS}/llvm-${LLVM_VERS}.src.tar.gz"
LLVM_TARBALL="src/llvm-${LLVM_VERS}.tar.gz"
LLVM_DIR="llvm-${LLVM_VERS}.src"

### Compiler-RT
CRT_URL="http://llvm.org/releases/3.1/compiler-rt-3.1.src.tar.gz"
CRT_TARBALL="src/compiler-rt-${CRT_VERS}.tar.gz"
CRT_DIR="compiler-rt-3.1.src"

## Clean-up
if [ "$1" = "clean" -o "$1" = "distclean" ]; then
	rm -rf "${CLANG_DIR}" "${LLVM_DIR}" "${CRT_DIR}" "${BINUTILS_DIR}"

	for platform in "${platforms[@]}"; do
		rm -rf "llvm-${platform}"
	done

	for appscript in scripts/* scripts/pre/* scripts/post/*; do
		"${appscript}" "clean" >/dev/null 2>/dev/null
	done

	if [ "$1" = "clean" ]; then
		exit 0
	fi
fi

if [ "$1" = "distclean" ]; then
	rm -f "${CLANG_TARBALL}" "${LLVM_TARBALL}" "${CRT_TARBALL}" "${BINUTILS_TARBALL}"

	for appscript in scripts/* scripts/pre/* scripts/post/*; do
		"${appscript}" "distclean" >/dev/null 2>/dev/null
	done

	rmdir src >/dev/null 2>/dev/null

	exit 0
fi

## Tools
MAKE="${MAKE:-make}"
MAKE_SINGLE="$(echo " ${MAKE} " | sed 's@ -j *[0-9][0-9]* @ @g;s@^  *@@g;s@  *$@@g')"
export MAKE MAKE_SINGLE

## Functions
. 'scripts/common'

## Determine path for this cross-compiler
CCNAME="$1"
CCDIR="${CCROOT}/${CCNAME}"

## Determine attributes for this compiler
### Per CPU
case "${CCNAME}" in
	hppa64-*|hppa1*-)
		BUILD_CC_LLVM_CONFIGURE_EXTRA="${BUILD_CC_LLVM_CONFIGURE_EXTRA} --disable-libquadmath"
		;;
esac

### Per OS
case "${CCNAME}" in
	*-hpux*)
		#### Default to disabling multilib, will be re-enabled by target if supported
		use_multilib='0'
		;;
	*-freebsd*)
		#### Default to disabling multilib, will be re-enabled by target if supported
		use_multilib='0'
		;;
esac

### Disable optimizations if compiling with GCC older than 4.6
if ${CC:-gcc} --version 2>/dev/null | grep 'gcc' >/dev/null; then
	BUILD_CC_LLVM_CONFIGURE_EXTRA="${BUILD_CC_LLVM_CONFIGURE_EXTRA} --with-optimize-option=-O0"
fi

## Determine platform file tarball
PLATFORM_TARBALL="${BUILD_CC_PLATFORMDIR}/${CCNAME}-platform.tar.bz2"
ADDONS_TARBALL="${BUILD_CC_PLATFORMDIR}/platform/${CCNAME}-addons.tar.bz2"

### Install platform files (needed for libgcc)
(
	mkdir -p "${CCDIR}/${CCNAME}"
	cd "${CCDIR}/${CCNAME}" || exit 1

	if [ ! -e 'usr' ]; then
		#### Create symlink so things like "./usr/include" work.
		ln -s . usr
	fi

	if [ -f "${PLATFORM_TARBALL}" ]; then
		bzip2 -dc "${PLATFORM_TARBALL}" | "${TAR:-tar}" --keep-old-files -xf - >/dev/null 2>/dev/null
	fi

	if [ -f "${ADDONS_TARBALL}" ]; then
		bzip2 -dc "${ADDONS_TARBALL}" | "${TAR:-tar}" --keep-old-files -xf - >/dev/null 2>/dev/null
	fi
)

### Set use_multilib authoritatively if possible
if [ -f "${CCDIR}/${CCNAME}/multilib" ]; then
	use_multilib="$(cat "${CCDIR}/${CCNAME}/multilib")"
	rm -f "${CCDIR}/${CCNAME}/multilib"
fi

### Set C compiler flags from tarball
if [ -f "${CCDIR}/${CCNAME}/BUILD_CC_LLVM_CONFIGURE_EXTRA" ]; then
	add="$(cat "${CCDIR}/${CCNAME}/BUILD_CC_LLVM_CONFIGURE_EXTRA")"

	#### Ensure these flags aren't malicious
	##### XXX: TODO: Build the extra flags as an array for safety
	if ! echo "${add}" | grep '[;|<>]' >/dev/null; then
		BUILD_CC_LLVM_CONFIGURE_EXTRA="${BUILD_CC_LLVM_CONFIGURE_EXTRA} ${add}"
	fi
	
	rm -f "${CCDIR}/${CCNAME}/BUILD_CC_LLVM_CONFIGURE_EXTRA"
fi

## Determine stage of build process
STAGE="$2"

### If we have a platform tarball and a stage has not been specified, assume we are at stage 2
if [ -z "${STAGE}" ]; then
	if [ -f "${PLATFORM_TARBALL}" ]; then
		STAGE="stage2"
	else
		STAGE="stage1"
	fi
fi

### Normalize stage names
if [ "${STAGE}" != "stage1" ]; then
	STAGE="stage2"
fi
export STAGE

### Do pre-compilation steps
for prescript in scripts/pre/*; do
	if [ ! -x "${prescript}" ]; then
		continue
	fi

	sourcefile="${TMPDIR:-/tmp}/build-cc-sourcefile-$$${RANDOM}${RANDOM}${RANDOM}"
	rm -f "${sourcefile}"

	"${prescript}" "${CCNAME}" "${CCDIR}" "${CCDIR}/${CCNAME}" "${STAGE}" "${sourcefile}" || exit 1

	if [ -f "${sourcefile}" ]; then
		. "${sourcefile}"
		rm -f "${sourcefile}"
	fi
done

## Compile binutils for this platform if needed
(
	if [ -f "${CCDIR}/bin/${CCNAME}-objcopy" ]; then
		exit 0
	fi

	if [ ! -d "${BINUTILS_DIR}" ]; then
		download "${BINUTILS_URL}" "${BINUTILS_TARBALL}"

		bzip2 -dc "${BINUTILS_TARBALL}" | tar -xf -
	fi

	rm -rf "binutils-${CCNAME}"
	mkdir "binutils-${CCNAME}"
	cd "binutils-${CCNAME}" || exit -1

	"../${BINUTILS_DIR}/configure" --target="${CCNAME}" --prefix="${CCDIR}" --disable-nls --with-sysroot="${CCDIR}/${CCNAME}" --with-build-sysroot="${CCDIR}/${CCNAME}"

	${MAKE} || exit 1

	${MAKE} install || exit 1
) || exit 1
if [ "${BUILD_CC_DONT_REMOVE}" != '1' ]; then
	rm -rf "binutils-${CCNAME}"
fi

## Compile C compiler (CLANG) if needed
### Prepare fix-ups (stage1)
if [ "${STAGE}" = "stage1" ]; then
	true
fi

### If multilib was not requested, disable it
if [ "${use_multilib}" = "0" ]; then
	#BUILD_CC_GCC_CONFIGURE_EXTRA="--disable-multilib ${BUILD_CC_GCC_CONFIGURE_EXTRA}"
	true
fi

## Compile
(
	### Determine if compilation is needed
	if [ -f "${CCDIR}/bin/${CCNAME}-gcc" ]; then
		if find "${CCDIR}/lib/gcc" -type f -name 'libgcc.a' | grep libgcc >/dev/null; then
			if [ "${STAGE}" = "stage1" ]; then
				#### A stage1 compiler is available
				exit 2
			else
				#### Determine if a stage2 compiler has been built
				if find "${CCDIR}" -type f -name 'libgcc_s.*' | grep libgcc_s >/dev/null; then
					exit 2
				fi
			fi
		fi
	fi

	if [ ! -d "${LLVM_DIR}" ]; then
		# Download sources required
		download "${CLANG_URL}" "${CLANG_TARBALL}"
		download "${LLVM_URL}" "${LLVM_TARBALL}"
		download "${CRT_URL}" "${CRT_TARBALL}"

		# Extract sources
		gzip -dc "${CLANG_TARBALL}" | "${TAR:-tar}" -xf -
		gzip -dc "${LLVM_TARBALL}" | "${TAR:-tar}" -xf -
		gzip -dc "${CRT_TARBALL}" | "${TAR:-tar}" -xf -

		# Arroung sources as needed
		rm -rf "${LLVM_DIR}/tools/clang"
		rm -rf "${LLVM_DIR}/projects/compiler-rt"

		mv "${CLANG_DIR}" "${LLVM_DIR}/tools/clang"
		mv "${CRT_DIR}" "${LLVM_DIR}/projects/compiler-rt"

		# Apply patches
		## Apply patch files
		for patchfile in "$(pwd)/patches/llvm"/*.diff; do
			patchfile_checkscript="$(echo "${patchfile}" | sed 's@\.diff$@.sh@')"
			if [ ! -f "${patchfile}" ]; then
				continue
			fi

			if [ -x "${patchfile_checkscript}" ]; then
				if ! "${patchfile_checkscript}" "${LLVM_VERS}"; then
					continue
				fi
			fi

			(
				echo " * Applying patch ${patchfile}"

				cd "${LLVM_DIR}" || exit 1

				"${PATCH:-patch}" -p1 < "${patchfile}" || exit 1
			) || exit 1
		done

		## Apply patch scripts
		export LLVM_DIR
		for script in scripts/llvm/*; do
			if [ ! -x "${script}" ]; then
				continue
			fi

			sourcefile="${TMPDIR:-/tmp}/build-cc-sourcefile-$$${RANDOM}${RANDOM}${RANDOM}"
			rm -f "${sourcefile}"

			"${script}" "${CCNAME}" "${CCDIR}" "${CCDIR}/${CCNAME}" "${STAGE}" "${sourcefile}" || exit 1

			if [ -f "${sourcefile}" ]; then
				. "${sourcefile}"
				rm -f "${sourcefile}"
			fi
		done
	fi

	# Build CLANG with shared object support
	## Create build directory
	rm -rf "llvm-${CCNAME}"
	mkdir "llvm-${CCNAME}"
	cd "llvm-${CCNAME}" || exit -1

	## Update environment so C compiler's build system can find binutils
	PATH="${PATH}:${CCDIR}/bin"
	export PATH

	## Build Compiler
	if [ "${STAGE}" = "stage1" ]; then
		# XXX: TODO
		true
	else
		### Stage 2 -- the full compiler suite
		"../${LLVM_DIR}/configure" --target="${CCNAME}" --prefix="${CCDIR}" --with-default-sysroot="${CCDIR}/${CCNAME}" ${BUILD_CC_LLVM_CONFIGURE_EXTRA}

		${MAKE} VERBOSE=1 || exit 1
		${MAKE} VERBOSE=1 install || exit 1
	fi
)
retval="$?"

### Post stage1 build fixups
if [ "${STAGE}" = "stage1" ]; then
	true
fi

### If we exited with failure above, abort
if [ "${retval}" != "2" -a "${retval}" != "0" ]; then
	exit 1
fi

if [ "${BUILD_CC_DONT_REMOVE}" != '1' ]; then
	rm -rf "llvm-${CCNAME}"
fi

## Install libraries for this platform
for appscript in scripts/* scripts/post/*; do
	if echo "${appscripts}" | grep '/common$' >/dev/null; then
		continue
	fi

	if [ ! -f "${appscript}" -o ! -x "${appscript}" ]; then
		continue
	fi

	(
		PATH="${PATH}:${CCDIR}/bin"
		CC="${CCNAME}-cc"
		LD="${CCNAME}-ld"
		CXX="${CCNAME}-c++"
		AR="${CCNAME}-ar"
		STRIP="${CCNAME}-strip"
		RANLIB="${CCNAME}-ranlib"
		export PATH CC LD CXX AR STRIP RANLIB

		"${appscript}" "${CCNAME}" "${CCDIR}" "${CCDIR}/${CCNAME}" "${STAGE}" || exit 1
	) || exit 1
done

## Do it all again for the next stage
if [ "${STAGE}" = "stage1" ]; then
	"$0" "${CCNAME}" "stage2" || exit "$?"
fi

## Clean up
exit 0

#! /bin/bash

# 1. Determine platform
PLATFORM=''
if [ -n "$1" ]; then
	PLATFORM="$1"

	if [ "${PLATFORM}" = "auto" ]; then
		PLATFORM=''
	fi
fi

if [ -z "${PLATFORM}" ]; then
	case "$(uname -s)" in
		SunOS)
			case "$(uname -r)" in
				5.*)
					SOLARIS_VERSION="2.$(uname -r | cut -f 2 -d '.')"
					;;
				*)
					SOLARIS_VERSION="1.$(uname -r | cut -f 2 -d '.')"
					;;
			esac

			if isainfo 2>/dev/null | grep sparc >/dev/null; then
				PLATFORM="sparc-sun-solaris${SOLARIS_VERSION}"
			elif isainfo 2>/dev/null | grep i386 >/dev/null; then
				PLATFORM="i386-pc-solaris${SOLARIS_VERSION}"
			fi
			;;
		HP-UX)
			HPUX_VERSION="$(uname -r | sed 's@^[A-Z][A-Z]*\.@@')"

			if hp-pa 2>/dev/null >/dev/null; then
				if [ -d '/usr/lib/pa20_64' ]; then
					PLATFORM="hppa64-hp-hpux${HPUX_VERSION}"
				else
					PLATFORM="hppa1.1-hp-hpux${HPUX_VERSION}"
				fi
			else
				PLATFORM="ia64-hp-hpux${HPUX_VERSION}"
			fi
			;;
		NetBSD)
			PLATFORM="$(uname -p)-unknown-netbsd$(uname -r | cut -f 1 -d '.')"
			;;
		FreeBSD)
			# Determine more generic CPU platform name
			cpu_platform="$(uname -p)"
			case "${cpu_platform}" in
				amd64)
					cpu_platform="x86_64"
					;;
			esac

			PLATFORM="${cpu_platform}-unknown-freebsd$(uname -r | cut -f 1 -d '.')"
			;;
		Darwin)
			case "$(uname -r)" in
				11.*)
					cpu_platform="x86_64"
					;;
			esac
			PLATFORM="${cpu_platform}-apple-darwin$(uname -r | cut -f 1 -d '.')"
			;;
	esac
fi

if [ -z "${PLATFORM}" ]; then
	echo 'Unable to guess platform.  Try specifying the platform.' >&2

	exit 1
fi

# 2. Create directory to hold system files
PLATFORM_ROOT="/var/tmp/platform-$$${RANDOM}${RANDOM}${RANDOM}"
PLATFORM_INCLUDE="${PLATFORM_ROOT}/include"
PLATFORM_LIB="${PLATFORM_ROOT}/lib"

rm -rf "${PLATFORM_ROOT}"
mkdir -p "${PLATFORM_ROOT}" "${PLATFORM_LIB}" "${PLATFORM_INCLUDE}"

# 3. Collect header files
case "${PLATFORM}" in
	*-solaris2*)
		# Libraries
		mkdir "${PLATFORM_LIB}/64"
		cp /usr/lib/64/*.o "${PLATFORM_LIB}/64/"
		cp /lib/64/lib*.so* "${PLATFORM_LIB}/64/"
		cp /lib/64/lib*.a "${PLATFORM_LIB}/64/"
		cp /usr/lib/64/lib*.so* "${PLATFORM_LIB}/64/"
		cp /usr/lib/64/lib*.a "${PLATFORM_LIB}/64/"
		if echo "${PLATFORM}" | grep '^sparc' >/dev/null; then
			ln -s '64' "${PLATFORM_LIB}/sparcv9"
		else
			ln -s '64' "${PLATFORM_LIB}/amd64"
		fi

		cp /usr/lib/*.o "${PLATFORM_LIB}/"
		cp /lib/lib*.so* "${PLATFORM_LIB}/"
		cp /lib/lib*.a "${PLATFORM_LIB}/"
		cp /usr/lib/lib*.so* "${PLATFORM_LIB}/"
		cp /usr/lib/lib*.a "${PLATFORM_LIB}/"
		ln -s '.' "${PLATFORM_LIB}/32"

		# Headers
		cp -rp /usr/include/* "${PLATFORM_INCLUDE}/"
		;;
	*-netbsd*)
		# Libraries
		## Determine the X11 sub-directory
		for xdir in X11R7 X11R6 __fail__; do
			if [ -d "/usr/${xdir}/lib" ]; then
				break
			fi

			if [ "${xdir}" = "__fail__" ]; then
				echo 'WARNING: Unable to find X11 libraries, collection will be incomplete!' >&2
			fi
		done

		## Determine sub-archs
		for subarch in i386 sparc; do
			subarchdir="/usr/lib/${subarch}"
			if [ ! -d "${subarchdir}" ]; then
				continue
			fi

			mkdir "${PLATFORM_LIB}/${subarch}"
			cp "${subarchdir}"/*.o "${PLATFORM_LIB}/${subarch}/"
			cp "${subarchdir}"/lib*.so "${PLATFORM_LIB}/${subarch}/"
			cp "${subarchdir}"/lib*.a "${PLATFORM_LIB}/${subarch}/"
		done

		cp /usr/${xdir}/lib/lib*.so* "${PLATFORM_LIB}/"
		cp /usr/${xdir}/lib/*.a "${PLATFORM_LIB}/"

		cp /usr/lib/*.o "${PLATFORM_LIB}/"
		cp /usr/lib/lib*.so* "${PLATFORM_LIB}/"
		cp /usr/lib/lib*.a "${PLATFORM_LIB}/"

		cp /lib/lib*.so* "${PLATFORM_LIB}/"
		cp /lib/lib*.a "${PLATFORM_LIB}/"

		# Headers
		cp -rp /usr/${xdir}/include/* "${PLATFORM_INCLUDE}/"
		cp -rp /usr/include/* "${PLATFORM_INCLUDE}/"
		;;
	*-hpux11*)
		# Libraries
		if echo "${PLATFORM}" | grep '^hppa64-' >/dev/null; then
			if [ -d '/usr/lib/pa20_64' ]; then
				cp /usr/lib/pa20_64/*.o "${PLATFORM_LIB}"
				cp /usr/ccs/lib/pa20_64/*.o "${PLATFORM_LIB}"

				cp /usr/lib/pa20_64/lib*.[0-9] "${PLATFORM_LIB}"
				cp /usr/lib/pa20_64/lib*.sl "${PLATFORM_LIB}"
				cp /usr/lib/pa20_64/*.a "${PLATFORM_LIB}"

				cp /usr/lib/X11R6/pa20_64/lib*.[0-9] "${PLATFORM_LIB}"
				cp /usr/lib/X11R6/pa20_64/lib*.sl "${PLATFORM_LIB}"
				cp /usr/lib/X11R6/pa20_64/*.a "${PLATFORM_LIB}"
			fi
		else
			cp /usr/lib/*.o "${PLATFORM_LIB}"

			cp /usr/lib/lib*.[0-9] "${PLATFORM_LIB}"
			cp /usr/lib/lib*.sl "${PLATFORM_LIB}"
			cp /usr/lib/*.a "${PLATFORM_LIB}"

			cp /usr/lib/X11R6/lib*.[0-9] "${PLATFORM_LIB}"
			cp /usr/lib/X11R6/lib*.sl "${PLATFORM_LIB}"
			cp /usr/lib/X11R6/*.a "${PLATFORM_LIB}"
		fi

		## Create lib symlinks as needed
		(
			cd "${PLATFORM_LIB}" || exit 1

			for libfile in *.[0-9]; do
				if echo "${libfile}" | grep '\.sl' >/dev/null; then
					continue
				fi

				shlib="$(echo "${libfile}" | sed 's@\.[0-9]$@@').sl"
				if [ -f "${shlib}" ]; then
					continue
				fi

				rm -f "${shlib}"
				ln -s "${libfile}" "${shlib}"
			done
		)

		# Headers
		## Create all directories
		(
			cd /usr/include || exit 1

			find . -type d
		) | while read dir; do
			mkdir "${PLATFORM_INCLUDE}/${dir}" >/dev/null 2>/dev/null
		done

		## Create all symlinks to directories
		(
			cd /usr/include || exit 1

			find . -type l
		) | while read link; do
			if [ ! -d "/usr/include/${link}" ]; then
				continue
			fi

			cp -R "/usr/include/${link}" "${PLATFORM_INCLUDE}/${link}"
		done

		## Create all files
		(
			cd /usr/include || exit 1

			find . -type f
		) | while read file; do
			cat "/usr/include/${file}" > "${PLATFORM_INCLUDE}/${file}"
		done
		;;
	*-darwin*)
		# Determine path to SDK
		## Determine Mac OS X version
		macosxvers_maj='10'
		macosxvers_min="$[$(uname -r | cut -f 1 -d '.') - 4]"

		## Determine SDK path from version
		sdkroot='/Developer/SDKs'
		if [ -d "${sdkroot}/MacOSX${macosxvers_maj}.${macosxvers_min}.sdk" ]; then
			sdkdir="${sdkroot}/MacOSX${macosxvers_maj}.${macosxvers_min}.sdk"
		else
			sdkdir="$(ls -1 "${sdkroot}/MacOSX${macosxvers_maj}.${macosxvers_min}*.sdk" | head -1)"
		fi

		# Libraries
		cp /usr/lib/*.o "${PLATFORM_LIB}"
		cp /usr/lib/lib*.dylib* "${PLATFORM_LIB}"
		cp /usr/lib/lib*.a "${PLATFORM_LIB}"

		mkdir "${PLATFORM_LIB}/system"
		cp /usr/lib/system/*.o "${PLATFORM_LIB}/system/"
		cp /usr/lib/system/lib*.dylib* "${PLATFORM_LIB}/system/"
		cp /usr/lib/system/lib*.a "${PLATFORM_LIB}/system/"

		# Headers
		cp -rp /usr/include/* "${PLATFORM_INCLUDE}/"

		# Frameworks
		PLATFORM_FRAMEWORKS="${PLATFORM_ROOT}/System/Library/Frameworks"
		export PLATFORM_FRAMEWORKS

		mkdir -p "${PLATFORM_FRAMEWORKS}"
		cp -rp "${sdkdir}/System/Library/Frameworks"/*.framework "${PLATFORM_FRAMEWORKS}"
		;;
	*)
		# Print a warning if this is an unknown platform
		case "${PLATFORM}" in
			*-freebsd*)
				# FreeBSD is generic, non-multilib
				;;
			*)
				echo 'WARNING: Unknown system type, using generic collection' >&2
				;;
		esac

		# Libraries
		cp /usr/local/lib/*.o "${PLATFORM_LIB}"
		cp /usr/local/lib/lib*.so* "${PLATFORM_LIB}"
		cp /usr/local/lib/lib*.a "${PLATFORM_LIB}"
		cp /usr/lib/*.o "${PLATFORM_LIB}"
		cp /usr/lib/lib*.so* "${PLATFORM_LIB}"
		cp /usr/lib/lib*.a "${PLATFORM_LIB}"
		cp /lib/*.o "${PLATFORM_LIB}"
		cp /lib/lib*.so* "${PLATFORM_LIB}"
		cp /lib/lib*.a "${PLATFORM_LIB}"

		# Headers
		cp -rp /usr/local/include/* "${PLATFORM_INCLUDE}/"
		cp -rp /usr/include/* "${PLATFORM_INCLUDE}/"
		;;
esac

# 4. Create archive
## Resolve symlinks
find "${PLATFORM_ROOT}" -type l | while read link; do
	if [ -d "${link}" ]; then
		continue
	fi

	cat "${link}" > "${link}.new"
	rm "${link}"
	mv "${link}.new" "${link}"
done

## Re-create safe symlinks
(
	cd "${PLATFORM_ROOT}" || exit 1

	prevhash=''; find . -type f | xargs openssl sha1  | sed 's@^SHA1(\(.*\))= \([0-9a-f][0-9a-f]*\)$@\2 \1@' | sort | while read hash file; do
		file="$(echo "${file}" | sed 's@^\./@@')"

		if [ "${hash}" = "${prevhash}" ]; then
			numslashes="$(echo "${file}" | sed 's@[^/]@@g' | wc -c | awk '{ print $1 - 1 }')"
			prefix=''
			for ((idx = 0; $idx < $numslashes; idx++)); do
				prefix="../${prefix}"
			done

			rm -f "${file}"
			ln -s "${prefix}${prevfile}" "${file}"

			continue
		fi

		prevhash="${hash}"
		prevfile="${file}"
	done
)

## Create archive
(
	cd "${PLATFORM_ROOT}" || exit 1

	tar -cf - *
) | bzip2 -9c > "${PLATFORM}-platform.tar.bz2"

## Remove temporary files
rm -rf "${PLATFORM_ROOT}"

exit 0

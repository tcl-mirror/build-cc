#! /bin/bash

# URLs and versions
if [ -z "${GLIBC_VERS}" ]; then
	GLIBC_VERS='2.20'
fi
GLIBC_URL="http://ftp.gnu.org/gnu/glibc/glibc-${GLIBC_VERS}.tar.gz"
GLIBC_TARBALL="src/glibc-${GLIBC_VERS}.tar.gz"
GLIBC_DIR="glibc-${GLIBC_VERS}"

if [ -z "${GLIBC_PORTS_VERS}" ]; then
	GLIBC_PORTS_VERS='2.16'
fi
GLIBC_PORTS_URL="http://ftp.gnu.org/gnu/glibc/glibc-ports-${GLIBC_PORTS_VERS}.tar.gz"
GLIBC_PORTS_TARBALL="src/glibc-ports-${GLIBC_PORTS_VERS}.tar.gz"
GLIBC_PORTS_DIR="$(pwd)/glibc-ports-${GLIBC_PORTS_VERS}"

# Main script
CCNAME="$1"
CCDIR="$2"
PREFIX="$3"
STAGE="$4"

# Clean
if [ "$1" = "distclean" ]; then
	rm -f "${GLIBC_TARBALL}"

	set -- clean
fi

if [ "$1" = "clean" ]; then
	rm -rf "${GLIBC_DIR}"
	rm -rf "${GLIBC_PORTS_DIR}"
	rm -rf glibc-*-*-*

	exit 0
fi

# Only build glibc for linux-gnu platforms
if ! echo "${CCNAME}" | grep -- '-unknown-linux-gnu' >/dev/null; then
	exit 0
fi

# Download source
. 'scripts/common'

if [ ! -d "${GLIBC_DIR}" ]; then
	download "${GLIBC_URL}" "${GLIBC_TARBALL}" || exit 1

	gzip -dc "${GLIBC_TARBALL}" | tar -xf -
fi

if [ ! -d "${GLIBC_PORTS_DIR}" ]; then
	download "${GLIBC_PORTS_URL}" "${GLIBC_PORTS_TARBALL}" || exit 1

	gzip -dc "${GLIBC_PORTS_TARBALL}" | tar -xf -
fi

# Ensure that a stdio.h exists, even if it is blank for autoconf scripts
touch "${PREFIX}/include/stdio.h"

CC_SAVE="${CC}"
for arch in $(multilib); do
	CC="${CC_SAVE} $(multilib --cflags "${arch}")"
	arch_host="$(multilib --host "${arch}")"
	arch_libdir="$(multilib --libdir "${arch}")"

	if [ -e "${arch_libdir}/glibc-${GLIBC_VERS}-completed-${STAGE}" ]; then
		continue
	fi

	# Inform the user of what we are doing
	echo " * Building GNU C Library (glibc version ${GLIBC_VERS}) for ${arch_host}"

	rm -rf "glibc-${CCNAME}-${arch_host}"
	mkdir "glibc-${CCNAME}-${arch_host}"
	cd "glibc-${CCNAME}-${arch_host}" || exit 1

	case "${STAGE}" in
		stage1)
			"../${GLIBC_DIR}/configure" --prefix="${PREFIX}" --libdir="${arch_libdir}" --host="${arch_host}" \
				--disable-profile --without-gd --without-cvs --without-selinux --enable-add-ons="${GLIBC_PORTS_DIR},nptl" --with-tls \
				libc_cv_forced_unwind=yes libc_cv_ctors_header=yes libc_cv_c_cleanup=yes || exit 1
			echo '#define HAVE_TLS_SUPPORT 1' >> config.h

			${MAKE}

			${MAKE} install

			cd ..

			rm -rf "glibc-${CCNAME}-${arch_host}"
			mkdir "glibc-${CCNAME}-${arch_host}"
			cd "glibc-${CCNAME}-${arch_host}" || exit 1

			"../${GLIBC_DIR}/configure" --prefix="${PREFIX}" --libdir="${arch_libdir}" --host="${arch_host}" --enable-add-ons="${GLIBC_PORTS_DIR},libidn,nptl" \
				libc_cv_forced_unwind=yes libc_cv_ctors_header=yes libc_cv_c_cleanup=yes || exit 1
			;;
		stage2)
			"../${GLIBC_DIR}/configure" --prefix="${PREFIX}" --libdir="${arch_libdir}" --host="${arch_host}" --enable-add-ons="${GLIBC_PORTS_DIR},libidn,nptl" || exit 1
			;;
	esac

	${MAKE}

	${MAKE} install

	cd ..

	rm -rf "glibc-${CCNAME}-${arch_host}"

	touch "${arch_libdir}/glibc-${GLIBC_VERS}-completed-${STAGE}"
done

if [ "${STAGE}" = 'stage1' ]; then
	# Force rebuilding binutils
	touch "${CCDIR}/bin/${CCNAME}-rebuild-binutils"
fi

exit 0
